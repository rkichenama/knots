(()=>{"use strict";var t,e={920:(t,e,s)=>{var i=s(294),n=s(745);class r{constructor(t=1,e=1){this.runs=[],this.fromPin=0,this.toPin=0,this.runs=[],this.fromPin=t,this.toPin=e}append(t){this.runs.push(t)}steps(){let t=[];for(let e=0;e<this.runs.length;e++)0===t.length||t[t.length-1].codingPattern!=this.runs[e]?t.push({codingPattern:this.runs[e],count:1}):t[t.length-1].count++;let e=[];for(let s=0;s<t.length;s++)e.push(`${t[s].codingPattern}${t[s].count>1?t[s].count:""}`);return e.join(" ")}}function l(t,e){return 0===e?t:l(e,t%e)}class h{constructor({parts:t=5,bights:e=6,sobre:s=!1,pattern:i="\\/"}){this.parts=t,this.bights=e,this.pattern=i,this.sobre=!!s,this.solve()}checkConditions(){if(!this.parts||!this.bights)throw"the parts and bights both must be greater than 0";if(1!=l(this.parts,this.bights))throw"the parts and bights must have a greatest common divisor of 1"}fillCoding(){this.coding="";for(let t=0;t<this.parts-1;t++)this.coding+=this.pattern[t%this.pattern.length]}initVars(){this.remainder=this.parts%this.bights,this.countValue=this.bights-this.remainder,this.cyclicBightNumber=[],this.topCyclicBightNumber=[],this.botCyclicBightNumber=[],this.topCodingPattern=[],this.botCodingPattern=[],this.halfCycles=[],this.pins=[]}fillCbn(){for(let t=0;t<this.bights;t++)this.cyclicBightNumber[t*this.countValue%this.bights]=t;for(let t=0;t<this.parts-1;t++)this.topCyclicBightNumber[t]=this.cyclicBightNumber[(t+1)%this.bights],this.botCyclicBightNumber[this.parts-1-t-1]=this.cyclicBightNumber[(t+1)%this.bights]}getPartFromType(t){return t?this.sobre?"U":"O":this.sobre?"O":"U"}fillUo(){for(let t=0;t<this.parts-1;t++){const e="\\"===this.coding[t];this.topCodingPattern.push(this.getPartFromType(!e)),this.botCodingPattern.push(this.getPartFromType(e))}}fillPins(){this.pins.push(1);let t=2*this.bights;if(this.parts%2)for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(s/2)+1)}else for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(0===s?(e*this.parts+1)%t/2:e%2?s/2:(s+1)/2)+1)}this.pins.push(1)}fillHalfCycles(){let t=new r(this.pins[0],this.pins[1]);this.halfCycles.push(t);for(let e=2;e<=2*this.bights;e++){t=new r(this.pins[e-1],this.pins[e]);const s=(e-2-e%2)/2,[i,n]=e%2?[this.topCodingPattern,this.topCyclicBightNumber]:[this.botCodingPattern,this.botCyclicBightNumber];for(let e=0;e<i.length;e++)n[e]<=s&&t.append(i[e]);this.halfCycles.push(t)}}solve(){this.checkConditions(),this.fillCoding(),this.initVars(),this.fillCbn(),this.fillUo(),this.fillPins(),this.fillHalfCycles()}steps(){let t=[],e=!1;for(const s of this.halfCycles)t.push(`${e?"top":"bot"} pin ${s.fromPin} to ${e?"bot":"top"} pin ${s.toPin}: ${s.steps()??"free run"}`),e=!e;return t}}const a=(0,s(726).td)(new h({bights:6,parts:5})),o=()=>{const[{bights:t,parts:e,sobre:s,pattern:n},r]=i.useState({bights:6,parts:5,sobre:!1,pattern:"\\/"}),[l,o]=i.useState(""),c=i.useCallback(((t,e)=>{const s=/pattern/.test(t)?e.target.value:/sobre/.test(t)?e.target.checked:e.target.valueAsNumber;r((e=>({...e,[t]:s})))}),[r]);return i.useEffect((()=>{try{o(""),a.value=new h({bights:t,parts:e,sobre:s,pattern:n})}catch(t){o(t.toString())}}),[t,e,s,n]),i.createElement("div",null,i.createElement("label",null,"Bights",i.createElement("input",{type:"number",value:t,onChange:t=>c("bights",t)})),i.createElement("label",null,"Parts",i.createElement("input",{type:"number",value:e,onChange:t=>c("parts",t)})),i.createElement("label",null,"Sobre",i.createElement("input",{type:"checkbox",checked:s,onChange:t=>c("sobre",t)})),i.createElement("label",null,"Pattern",i.createElement("input",{type:"text",value:n,onChange:t=>c("pattern",t)})),l&&i.createElement("h4",null,l))};var c=s(394);const u=({knot:{topCyclicBightNumber:t,botCyclicBightNumber:e,topCodingPattern:s,botCodingPattern:n,coding:r}})=>i.createElement("div",null,i.createElement("h3",null,"Algorithm Diagram"),i.createElement("table",null,i.createElement("tbody",null,i.createElement(m,{items:s}),i.createElement(m,{items:t}),i.createElement(m,{items:r.split("")}),i.createElement(m,{items:e}),i.createElement(m,{items:n})))),p=c.ZP.td.withConfig({displayName:"Cell",componentId:"sc-1bmbf8h"})`
  text-align: center;
`,m=({items:t})=>i.createElement("tr",null,t.map(((t,e)=>i.createElement(p,{key:`${e}-${t}`},t)))),g=({knot:t})=>i.createElement("div",null,i.createElement("h3",null,"Half Cycles"),i.createElement(b,null,t.steps().map((t=>i.createElement(f,{key:t},t))))),b=c.ZP.ol.withConfig({displayName:"HalfCycleList",componentId:"sc-1cfnhfe"})``,f=c.ZP.li.withConfig({displayName:"HalfCycleRow",componentId:"sc-1awb9co"})``,d=()=>{const t=a.value;return t?i.createElement(i.Fragment,null,i.createElement(u,{knot:t}),i.createElement(g,{knot:t})):""},C=document.createElement("section"),y=(0,n.s)(C),E=i.createElement(i.StrictMode,null,i.createElement((()=>i.createElement("div",null,i.createElement(o,null),i.createElement("hr",null),i.createElement(d,null))),null));document.body.appendChild(C),y.render(E)}},s={};function i(t){var n=s[t];if(void 0!==n)return n.exports;var r=s[t]={exports:{}};return e[t](r,r.exports,i),r.exports}i.m=e,t=[],i.O=(e,s,n,r)=>{if(!s){var l=1/0;for(c=0;c<t.length;c++){for(var[s,n,r]=t[c],h=!0,a=0;a<s.length;a++)(!1&r||l>=r)&&Object.keys(i.O).every((t=>i.O[t](s[a])))?s.splice(a--,1):(h=!1,r<l&&(l=r));if(h){t.splice(c--,1);var o=n();void 0!==o&&(e=o)}}return e}r=r||0;for(var c=t.length;c>0&&t[c-1][2]>r;c--)t[c]=t[c-1];t[c]=[s,n,r]},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={483:0};i.O.j=e=>0===t[e];var e=(e,s)=>{var n,r,[l,h,a]=s,o=0;if(l.some((e=>0!==t[e]))){for(n in h)i.o(h,n)&&(i.m[n]=h[n]);if(a)var c=a(i)}for(e&&e(s);o<l.length;o++)r=l[o],i.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return i.O(c)},s=self.webpackChunkknots=self.webpackChunkknots||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})(),i.nc=void 0;var n=i.O(void 0,[216],(()=>i(920)));n=i.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,