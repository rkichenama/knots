(()=>{"use strict";var t,e={797:(t,e,s)=>{var i=s(294),n=s(745);class r{constructor(t=1,e=1){this.runs=[],this.fromPin=0,this.toPin=0,this.runs=[],this.fromPin=t,this.toPin=e}append(t){this.runs.push(t)}steps(){let t=[];for(let e=0;e<this.runs.length;e++)0===t.length||t[t.length-1].codingPattern!=this.runs[e]?t.push({codingPattern:this.runs[e],count:1}):t[t.length-1].count++;let e=[];for(let s=0;s<t.length;s++)e.push(`${t[s].codingPattern}${t[s].count>1?t[s].count:""}`);return t.length?e.join(" "):void 0}}function l(t,e){return 0===e?t:l(e,t%e)}class o{constructor({parts:t=5,bights:e=6,sobre:s=!1,pattern:i="\\/"}){this.parts=t,this.bights=e,this.pattern=i||"\\/",this.sobre=!!s,this.solve()}checkConditions(){if(!this.parts||!this.bights)throw"the parts and bights both must be greater than 0";if(1!=l(this.parts,this.bights))throw"the parts and bights must have a greatest common divisor of 1"}fillCoding(){this.coding="";for(let t=0;t<this.parts-1;t++)this.coding+=this.pattern[t%this.pattern.length]}initVars(){this.wholeNumber=Math.floor(this.parts/this.bights),this.remainder=this.parts%this.bights,this.countValue=this.bights-this.remainder,this.cyclicBightNumber=[],this.topCyclicBightNumber=[],this.botCyclicBightNumber=[],this.topCodingPattern=[],this.botCodingPattern=[],this.halfCycles=[],this.pins=[]}fillCbn(){for(let t=0;t<this.bights;t++)this.cyclicBightNumber[t*this.countValue%this.bights]=t;for(let t=0;t<this.parts-1;t++)this.topCyclicBightNumber[t]=this.cyclicBightNumber[(t+1)%this.bights],this.botCyclicBightNumber[this.parts-1-t-1]=this.cyclicBightNumber[(t+1)%this.bights]}getPartFromType(t){return t?this.sobre?"U":"O":this.sobre?"O":"U"}fillUo(){for(let t=0;t<this.parts-1;t++){const e="\\"===this.coding[t];this.topCodingPattern.push(this.getPartFromType(!e)),this.botCodingPattern.push(this.getPartFromType(e))}}fillPins(){this.pins.push(1);let t=2*this.bights;if(this.parts%2)for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(s/2)+1)}else for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(0===s?(e*this.parts+1)%t/2:e%2?s/2:(s+1)/2)+1)}this.pins.push(1)}fillHalfCycles(){let t=new r(this.pins[0],this.pins[1]);this.halfCycles.push(t);for(let e=2;e<=2*this.bights;e++){t=new r(this.pins[e-1],this.pins[e]);const s=(e-2-e%2)/2;if(e%2)for(let e=0;e<this.topCodingPattern.length;e++)this.topCyclicBightNumber[e]<=s&&t.append(this.topCodingPattern[e]);else for(let e=this.botCodingPattern.length-1;e>=0;e--)this.botCyclicBightNumber[e]<=s&&t.append(this.botCodingPattern[e]);this.halfCycles.push(t)}}solve(){this.checkConditions(),this.fillCoding(),this.initVars(),this.fillCbn(),this.fillUo(),this.fillPins(),this.fillHalfCycles()}steps(){let t=[],e=!1;for(const s of this.halfCycles)t.push(`${e?"top":"bot"} pin ${s.fromPin} to ${e?"bot":"top"} pin ${s.toPin}: ${s.steps()??"free run"}`),e=!e;return t}}var a=s(726);const h=window.knot=(0,a.td)(new o({bights:6,parts:5})),c=(0,a.td)("");let p={bights:6,parts:5,sobre:!1,pattern:"\\/"};(()=>{const t=new URLSearchParams(window.location.hash.slice(1)),e=Object.fromEntries(t.entries());for(const t in p)e[t]&&(p[t]=/(bights|parts)/.test(t)?Number(e[t]):/sobre/.test(t)?"true"===e[t]:e[t])})();const u=()=>{const[{bights:t,parts:e,sobre:s,pattern:n},r]=i.useState(p),l=i.useCallback(((t,e)=>{const s=/pattern/.test(t)?e.target.value:/sobre/.test(t)?e.target.checked:e.target.valueAsNumber;r((e=>({...e,[t]:s})))}),[r]);return i.useEffect((()=>{try{c.value="",h.value=new o({bights:t,parts:e,sobre:s,pattern:n});const i=new URLSearchParams;i.set("bights",String(t)),i.set("parts",String(e)),i.set("sobre",String(s)),i.set("pattern",n),location.hash=i.toString()}catch(t){c.value=t.toString()}}),[t,e,s,n]),i.createElement("div",null,i.createElement("label",null,"Bights",i.createElement("input",{type:"number",value:t,min:2,onChange:t=>l("bights",t)})),i.createElement("label",null,"Parts",i.createElement("input",{type:"number",value:e,min:2,onChange:t=>l("parts",t)})),i.createElement("label",null,"Sobre",i.createElement("input",{type:"checkbox",checked:s,onChange:t=>l("sobre",t)})),i.createElement("label",null,"Pattern",i.createElement("input",{type:"text",value:n,onChange:t=>l("pattern",t)})))};var g=s(394);const m=({knot:{topCyclicBightNumber:t,botCyclicBightNumber:e,topCodingPattern:s,botCodingPattern:n,coding:r}})=>i.createElement("div",null,i.createElement("h3",null,"Algorithm Diagram"),i.createElement("table",null,i.createElement("tbody",null,i.createElement(f,{items:s}),i.createElement(f,{items:t}),i.createElement(f,{items:r.split("")}),i.createElement(f,{items:e}),i.createElement(f,{items:n})))),b=g.ZP.td.withConfig({displayName:"Cell",componentId:"sc-1bmbf8h"})`
  text-align: center;
`,f=({items:t})=>i.createElement("tr",null,t.map(((t,e)=>i.createElement(b,{key:`${e}-${t}`},t)))),d=({knot:t})=>i.createElement("div",null,i.createElement("h3",null,"Half Cycles"),i.createElement(v,null,t.steps().map((t=>i.createElement(C,{key:t},t))))),v=g.ZP.ol.withConfig({displayName:"HalfCycleList",componentId:"sc-1cfnhfe"})``,C=g.ZP.li.withConfig({displayName:"HalfCycleRow",componentId:"sc-1awb9co"})``,y=Math.PI/6,E=Math.tan(y),P=()=>{const t=i.useRef(null),e=h.value;return i.useEffect((()=>{t.current&&e&&(N(t.current,e),x(t.current,e),T(t.current,e))}),[e]),i.createElement("div",null,i.createElement("h3",null,"Knot Diagram"),i.createElement(w,null,i.createElement(k,{ref:t})))},w=g.ZP.div.withConfig({displayName:"ResizeContainer",componentId:"sc-jeawg"})`
  overflow: hidden;
  resize: auto;
`,k=g.ZP.canvas.withConfig({displayName:"Canvas",componentId:"sc-1yb1ogh"})`
  position: relative;
  height: 100%;
  width: 100%;
`,N=(t,e)=>{t.height=32*(e.bights-.5),t.parentElement.style.height=`${t.height}px`,t.width=16/E*2*(e.parts/2),t.parentElement.style.width=`${t.width}px`;const s=t.width,i=t.height;t.getContext("2d").clearRect(0,0,s,i)},x=(t,e)=>{const s=t.getContext("2d"),i=t.width,n=t.height,r=n/(e.bights-.5),l=r/2/E*2;s.fillStyle="#573c66",s.strokeStyle="black",s.textAlign="center",s.font="10px sans-serif";const o=e.parts/2,a=e.parts%2;for(let t=0;t<=e.bights;t++){s.lineWidth=1;for(let i=0;i<Math.ceil(o);i++)0===i&&(s.fillText(`${t+1}`,i+15,n-(t*r-3)),s.fillText(`${t+1}`,o*l-15,n-((t+.5*a)*r-3))),s.beginPath(),s.moveTo(i*l+e.parts/2*l,n-(t-o)*r),s.lineTo(i*l,n-t*r),s.lineTo(i*l+e.parts/2*l,n-(t+o)*r),s.stroke(),s.closePath(),s.beginPath(),s.moveTo(i*l-e.parts/2*l,n-(t-o)*r),s.lineTo(i*l,n-t*r),s.lineTo(i*l-e.parts/2*l,n-(t+o)*r),s.stroke(),s.closePath()}s.clearRect(o*l,0,i-o*l,n)},T=(t,e)=>{const s=t.getContext("2d"),i=t.height,n=i/(e.bights-.5),r=n/2/E*2;s.strokeStyle="black";const l=e.parts/2,o=e.parts%2,a=.2*r,h=.2*n,c=(t,e)=>[(t+.4)*r,i-(e+.6)*n],p=(t,e)=>[(t+.9)*r,i-e*n-3],u=([t,e])=>{s.clearRect(t,e,a,h),s.beginPath(),s.moveTo(t,e),s.lineTo(t+a,e+h),s.stroke(),s.closePath()},g=([t,e])=>{s.clearRect(t,e,a,h),s.beginPath(),s.moveTo(t+a,e),s.lineTo(t,e+h),s.stroke(),s.closePath()};for(let t=0;t<e.bights;t++){s.lineWidth=5;const i=e.coding.split("");for(let e=0;e<Math.floor(l);e++)("\\"===i.shift()?u:g)(c(e,t)),(o||e+1<l)&&("\\"===i.shift()?u:g)(p(e,t))}},B=()=>{const t=h.value;return i.createElement(i.Fragment,null,c.value&&i.createElement("h4",null,c.value),i.createElement("h2",null,t.bights,"B x ",t.parts,"P ",t.sobre?"sobre":"casa"," knot"),i.createElement(m,{knot:t}),i.createElement(P,null),i.createElement(d,{knot:t}))},O=document.createElement("section"),S=(0,n.s)(O),$=i.createElement(i.StrictMode,null,i.createElement((()=>i.createElement("div",null,i.createElement(u,null),i.createElement("hr",null),i.createElement(B,null))),null));document.body.appendChild(O),S.render($)}},s={};function i(t){var n=s[t];if(void 0!==n)return n.exports;var r=s[t]={exports:{}};return e[t](r,r.exports,i),r.exports}i.m=e,t=[],i.O=(e,s,n,r)=>{if(!s){var l=1/0;for(c=0;c<t.length;c++){for(var[s,n,r]=t[c],o=!0,a=0;a<s.length;a++)(!1&r||l>=r)&&Object.keys(i.O).every((t=>i.O[t](s[a])))?s.splice(a--,1):(o=!1,r<l&&(l=r));if(o){t.splice(c--,1);var h=n();void 0!==h&&(e=h)}}return e}r=r||0;for(var c=t.length;c>0&&t[c-1][2]>r;c--)t[c]=t[c-1];t[c]=[s,n,r]},i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={483:0};i.O.j=e=>0===t[e];var e=(e,s)=>{var n,r,[l,o,a]=s,h=0;if(l.some((e=>0!==t[e]))){for(n in o)i.o(o,n)&&(i.m[n]=o[n]);if(a)var c=a(i)}for(e&&e(s);h<l.length;h++)r=l[h],i.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return i.O(c)},s=self.webpackChunkknots=self.webpackChunkknots||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})(),i.nc=void 0;var n=i.O(void 0,[216],(()=>i(797)));n=i.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,