(()=>{"use strict";var t,e={643:(t,e,s)=>{var n=s(294),i=s(745);class r{constructor(t=1,e=1){this.runs=[],this.fromPin=0,this.toPin=0,this.runs=[],this.fromPin=t,this.toPin=e}append(t){this.runs.push(t)}steps(){let t=[];for(let e=0;e<this.runs.length;e++)0===t.length||t[t.length-1].codingPattern!=this.runs[e]?t.push({codingPattern:this.runs[e],count:1}):t[t.length-1].count++;let e=[];for(let s=0;s<t.length;s++)e.push(`${t[s].codingPattern}${t[s].count>1?t[s].count:""}`);return t.length?e.join(" "):void 0}}function l(t,e){return 0===e?t:l(e,t%e)}const o={"\\":"/","/":"\\"};class a{constructor({parts:t=5,bights:e=6,sobre:s=!1,pattern:n="\\/"}){this.parts=t,this.bights=e,this.pattern=n||"\\/",this.sobre=!!s,this.solve()}checkConditions(){if(!this.parts||!this.bights)throw"the parts and bights both must be greater than 0";if(1!=l(this.parts,this.bights))throw"the parts and bights must have a greatest common divisor of 1"}fillCoding(){this.coding="";for(let t=0;t<this.parts-1;t++)this.coding+=this.sobre?o[this.pattern[t%this.pattern.length]]:this.pattern[t%this.pattern.length]}initVars(){this.wholeNumber=Math.floor(this.parts/this.bights),this.remainder=this.parts%this.bights,this.countValue=this.bights-this.remainder,this.cyclicBightNumber=[],this.topCyclicBightNumber=[],this.botCyclicBightNumber=[],this.topCodingPattern=[],this.botCodingPattern=[],this.halfCycles=[],this.pins=[]}fillCbn(){for(let t=0;t<this.bights;t++)this.cyclicBightNumber[t*this.countValue%this.bights]=t;for(let t=0;t<this.parts-1;t++)this.topCyclicBightNumber[t]=this.cyclicBightNumber[(t+1)%this.bights],this.botCyclicBightNumber[this.parts-1-t-1]=this.cyclicBightNumber[(t+1)%this.bights]}getPartFromType(t){return t?"O":"U"}fillUo(){for(let t=0;t<this.parts-1;t++){const e="\\"===this.coding[t];this.topCodingPattern.push(this.getPartFromType(!e)),this.botCodingPattern.push(this.getPartFromType(e))}}fillPins(){this.pins.push(1);let t=2*this.bights;if(this.parts%2)for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(s/2)+1)}else for(let e=1;e<t;e++){const s=e*this.parts%t;this.pins.push(Math.floor(0===s?(e*this.parts+1)%t/2:e%2?s/2:(s+1)/2)+1)}this.pins.push(1)}fillHalfCycles(){let t=new r(this.pins[0],this.pins[1]);this.halfCycles.push(t);for(let e=2;e<=2*this.bights;e++){t=new r(this.pins[e-1],this.pins[e]);const s=(e-2-e%2)/2,[n,i]=e%2?[this.topCodingPattern,this.topCyclicBightNumber]:[this.botCodingPattern,this.botCyclicBightNumber];for(let e=0;e<n.length;e++)i[e]<=s&&t.append(n[e]);this.halfCycles.push(t)}}solve(){this.checkConditions(),this.fillCoding(),this.initVars(),this.fillCbn(),this.fillUo(),this.fillPins(),this.fillHalfCycles()}steps(){let t=[],e=!1;for(const s of this.halfCycles)t.push(`${e?"top":"bot"} pin ${s.fromPin} to ${e?"bot":"top"} pin ${s.toPin}: ${s.steps()??"free run"}`),e=!e;return t}}var h=s(726);const c=window.knot=(0,h.td)(new a({bights:6,parts:5})),p=(0,h.td)("");let u={bights:6,parts:5,sobre:!1,pattern:"\\/"};(()=>{const t=new URLSearchParams(window.location.hash.slice(1)),e=Object.fromEntries(t.entries());for(const t in u)e[t]&&(u[t]=/(bights|parts)/.test(t)?Number(e[t]):/sobre/.test(t)?"true"===e[t]:e[t])})();const g=()=>{const[{bights:t,parts:e,sobre:s,pattern:i},r]=n.useState(u),l=n.useCallback(((t,e)=>{const s=/pattern/.test(t)?e.target.value:/sobre/.test(t)?e.target.checked:e.target.valueAsNumber;r((e=>({...e,[t]:s})))}),[r]);return n.useEffect((()=>{try{p.value="",c.value=new a({bights:t,parts:e,sobre:s,pattern:i});const n=new URLSearchParams;n.set("bights",String(t)),n.set("parts",String(e)),n.set("sobre",String(s)),n.set("pattern",i),location.hash=n.toString()}catch(t){p.value=t.toString()}}),[t,e,s,i]),n.createElement("div",null,n.createElement("label",null,"Bights",n.createElement("input",{type:"number",value:t,min:2,onChange:t=>l("bights",t)})),n.createElement("label",null,"Parts",n.createElement("input",{type:"number",value:e,min:2,onChange:t=>l("parts",t)})),n.createElement("label",null,"Sobre",n.createElement("input",{type:"checkbox",checked:s,onChange:t=>l("sobre",t)})),n.createElement("label",null,"Pattern",n.createElement("input",{type:"text",value:i,onChange:t=>l("pattern",t)})))};var m=s(394);const b=({knot:{topCyclicBightNumber:t,botCyclicBightNumber:e,topCodingPattern:s,botCodingPattern:i,coding:r}})=>n.createElement("div",null,n.createElement("h3",null,"Algorithm Diagram"),n.createElement("table",null,n.createElement("tbody",null,n.createElement(d,{items:s}),n.createElement(d,{items:t}),n.createElement(d,{items:r.split("")}),n.createElement(d,{items:e}),n.createElement(d,{items:i})))),f=m.ZP.td.withConfig({displayName:"Cell",componentId:"sc-1bmbf8h"})`
  text-align: center;
`,d=({items:t})=>n.createElement("tr",null,t.map(((t,e)=>n.createElement(f,{key:`${e}-${t}`},t)))),v=({knot:t})=>n.createElement("div",null,n.createElement("h3",null,"Half Cycles"),n.createElement(C,null,t.steps().map((t=>n.createElement(y,{key:t},t))))),C=m.ZP.ol.withConfig({displayName:"HalfCycleList",componentId:"sc-1cfnhfe"})``,y=m.ZP.li.withConfig({displayName:"HalfCycleRow",componentId:"sc-1awb9co"})``,E=Math.PI/6,P=Math.tan(E),w=()=>{const t=n.useRef(null),e=c.value;return n.useEffect((()=>{t.current&&e&&(x(t.current,e),T(t.current,e),B(t.current,e))}),[e]),n.createElement("div",null,n.createElement("h3",null,"Knot Diagram"),n.createElement(k,null,n.createElement(N,{ref:t})))},k=m.ZP.div.withConfig({displayName:"ResizeContainer",componentId:"sc-jeawg"})`
  overflow: hidden;
  resize: auto;
`,N=m.ZP.canvas.withConfig({displayName:"Canvas",componentId:"sc-1yb1ogh"})`
  position: relative;
  height: 100%;
  width: 100%;
`,x=(t,e)=>{t.height=32*(e.bights-.5),t.parentElement.style.height=`${t.height}px`,t.width=16/P*2*(e.parts/2),t.parentElement.style.width=`${t.width}px`;const s=t.width,n=t.height;t.getContext("2d").clearRect(0,0,s,n)},T=(t,e)=>{const s=t.getContext("2d"),n=t.width,i=t.height,r=i/(e.bights-.5),l=r/2/P*2;s.fillStyle="#573c66",s.strokeStyle="black",s.textAlign="center",s.font="10px sans-serif";const o=e.parts/2,a=e.parts%2;for(let t=0;t<=e.bights;t++){s.lineWidth=1;for(let n=0;n<Math.ceil(o);n++)0===n&&(s.fillText(`${t+1}`,n+15,i-(t*r-3)),s.fillText(`${t+1}`,o*l-15,i-((t+.5*a)*r-3))),s.beginPath(),s.moveTo(n*l+e.parts/2*l,i-(t-o)*r),s.lineTo(n*l,i-t*r),s.lineTo(n*l+e.parts/2*l,i-(t+o)*r),s.stroke(),s.closePath(),s.beginPath(),s.moveTo(n*l-e.parts/2*l,i-(t-o)*r),s.lineTo(n*l,i-t*r),s.lineTo(n*l-e.parts/2*l,i-(t+o)*r),s.stroke(),s.closePath()}s.clearRect(o*l,0,n-o*l,i)},B=(t,e)=>{const s=t.getContext("2d"),n=t.height,i=n/(e.bights-.5),r=i/2/P*2;s.strokeStyle="black";const l=e.parts/2,o=e.parts%2,a=.2*r,h=.2*i,c=(t,e)=>[(t+.4)*r,n-(e+.6)*i],p=(t,e)=>[(t+.9)*r,n-e*i-3],u=([t,e])=>{s.clearRect(t,e,a,h),s.beginPath(),s.moveTo(t,e),s.lineTo(t+a,e+h),s.stroke(),s.closePath()},g=([t,e])=>{s.clearRect(t,e,a,h),s.beginPath(),s.moveTo(t+a,e),s.lineTo(t,e+h),s.stroke(),s.closePath()};for(let t=0;t<e.bights;t++){s.lineWidth=5;const n=e.coding.split("");for(let e=0;e<Math.floor(l);e++)("\\"===n.shift()?u:g)(c(e,t)),(o||e+1<l)&&("\\"===n.shift()?u:g)(p(e,t))}},O=()=>{const t=c.value;return n.createElement(n.Fragment,null,p.value&&n.createElement("h4",null,p.value),n.createElement("h2",null,t.bights,"B x ",t.parts,"P ",t.sobre?"sobre":"casa"," knot"),n.createElement(b,{knot:t}),n.createElement(w,null),n.createElement(v,{knot:t}))},S=document.createElement("section"),$=(0,i.s)(S),M=n.createElement(n.StrictMode,null,n.createElement((()=>n.createElement("div",null,n.createElement(g,null),n.createElement("hr",null),n.createElement(O,null))),null));document.body.appendChild(S),$.render(M)}},s={};function n(t){var i=s[t];if(void 0!==i)return i.exports;var r=s[t]={exports:{}};return e[t](r,r.exports,n),r.exports}n.m=e,t=[],n.O=(e,s,i,r)=>{if(!s){var l=1/0;for(c=0;c<t.length;c++){for(var[s,i,r]=t[c],o=!0,a=0;a<s.length;a++)(!1&r||l>=r)&&Object.keys(n.O).every((t=>n.O[t](s[a])))?s.splice(a--,1):(o=!1,r<l&&(l=r));if(o){t.splice(c--,1);var h=i();void 0!==h&&(e=h)}}return e}r=r||0;for(var c=t.length;c>0&&t[c-1][2]>r;c--)t[c]=t[c-1];t[c]=[s,i,r]},n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var s in e)n.o(e,s)&&!n.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={483:0};n.O.j=e=>0===t[e];var e=(e,s)=>{var i,r,[l,o,a]=s,h=0;if(l.some((e=>0!==t[e]))){for(i in o)n.o(o,i)&&(n.m[i]=o[i]);if(a)var c=a(n)}for(e&&e(s);h<l.length;h++)r=l[h],n.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return n.O(c)},s=self.webpackChunkknots=self.webpackChunkknots||[];s.forEach(e.bind(null,0)),s.push=e.bind(null,s.push.bind(s))})(),n.nc=void 0;var i=n.O(void 0,[216],(()=>n(643)));i=n.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,